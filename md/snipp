# TODO: dont use rotation base, keep the base as the main obj and the quad as the side object
# TODO: This means re evaluating the statesystem of spr2d

from random import random

if (self.position - self.loci).distance() > roam.radius:
    d = (a.position-self.loci)
    d = Vec3( d[0]*random(),0,d[2]*random() )

# rearrange fball to include start_cast?

# what if we want the action to continue for some time, put a cd on changing the action

#def try_until( ):
    #pass

def update():
    self.action(actionparams)
    if roam:
        change action/params based on conditions
        go to aggro
    if aggro:
        go to reset
    if reset:
        return back to center

change plr to chartr
# tab system
# right now assume to always have target
# how about change to target is from cursor if there is no current target
#
#
#
pathfinding
